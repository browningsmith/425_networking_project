Group:      vmgroup8
Authors:    Keith Smith, Sean Callahan
Assignment: Mobile TCP Proxy, Milestone 3 (+ Extra Credit)
files:      cproxy.c, sproxy.c, README.txt, MakeFile
Class:      425
Due Date:   04/16/2021

These programs satisfy requirements of Milestone 3, as well as the requirements
for reliable data transfer outlined in the Extra Credit

Packet format:
For the packet we decided since there are multiple fields to fill to use a struct
to help keep track of the bit offset of each of our variables. Our struct has five
members. The first four attributes are of type uint32_t: type, seqN, ackN, and length.
These four attributes comprise the header of the packet.
    type: is 0 for a heartbeat packet, and nonzero for a data packet
    seqN: the sequence number of the data packet being sent out
    ackN: the sequence number of the next packet the program is expecting to recieved
    length: the length in bytes of the packet payload
The fifth attribute of the struct is a void pointer to the payload itself. If the packet
is a heartbeat packet, the payload is an int with the value being the current sessionID.
If it is a data packet it contains data to be sent to telnet or telnet daemon

Protocol between sproxy and cproxy:

Connection:
When cproxy accepts a new connection from telnet on the provided listening port, 
cproxy first generates a new sessionID to be sent out as the payload of all heartbeat packets.
It then begins trying to connect to sproxy at the provided server ip and port. If it is
unable to connect, it will continue trying every 1-10 seconds until successful connection.
Once connection is successful, cproxy will send out its first heartbeat packet, with the
new sessionID as the payload, and seqN of 0 and ackN of 0. If the telnet session is terminated normally, cproxy will disconnect from the server and client and begin looking for new client connections.

when sproxy accepts a new connection from cproxy, it checks to see whether it is connected
to the telnet daemon. If it is not, it establishes a new connection to the daemon.
It next checks the first heartbeat packet from cproxy, to examine the sessionID. If the sessionID is a new sessionID, sproxy closes the hanging telnet connection, and reconnects to
start a new session with the daemon. But if the sessionID matches the sessionID that sproxy
already had, it maintains the current telnet session. If, however, the telnet session is terminated normally, cproxy will disconnect from the server and client and begin looking for new client connections.

Data transfer:
Each program maintains a seqN variable, the sequence number of the next packet to send out,
and ackN, the sequence number of the next packet that is expected from the other program.
Each time data is available on telnet (cproxy) or the telnet daemon (sproxy), the program
wraps that data in the data packet format described above, with the current seqN and ackN,
and increments seqN so the next packet sent will have a sequential number. It also adds a
copy of the packet to a linked list of packets that have not yet been acknowledged by the
other program. The value of ackN tells the other program the seqN of the next packet this
program is expecting to receive.

When a packet is received from the other program, it checks the packet type, and also
checks the ackN value in the packet, and removes any packets from the linked list of
unackd packets that have sequence numbers less than the given ackN, as we now know these
packets were successfully received by the other program.
If the packet is a heartbeat packet, is is essentially ignored other than to update a
record of time of when data was last received, or in the case of sproxy, it checks to
see if the sessionID is the same or different.
If the packet is a data packet, it also updates the time a message was last received,
but also checks the seqN of the packet. If the seqN matches the current ackN value,
we know this was the next packet that was expected, and the payload is forwarded to
telnet/telnet daemon. And ackN is incremented, since we are now expecting the next seqN.
If the seqN of the received packet does not match ackN, it is discarded.

Each program sends out a heartbeat type packet, including the sessionID as the payload,
once every second. They also retransmit any packets still within the linked list, as
these have not been acknowledged by the other program and may have been lost. This ensures
reliable data transmission in the event of a disconnection.

Disconnection:
If either program fails to receive data from the other over a period of 3 or more seconds,
it is assumed that at least three heartbeat packets have been missed, and the programs
close the sockets connecting each other, but leave the telnet and telnet daemon sockets open
in order to hopefully restore the original session upon reconnection. sproxy will move in to
a listening state again, and cproxy will begin attempting to connect again to sproxy.

But if the program detects a controlled disconnect of the telnet session, both programs
move into a listening state, to wait for a new telnet session to begin.

